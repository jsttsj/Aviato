<<<<<<< HEAD
=======
<<<<<<< HEAD
shiny::runApp('Aviato')
=======
base.url <- "https://api.twitter.com/1.1/search/tweets.json?q=%23"
hashtag <- input$search
query <- paste0(base.url, hashtag)
base.url <- "https://api.twitter.com/1.1/search/tweets.json?q=%23"
query <- paste0(base.url, "cheese")
query
fromJSON(query)
library(jsonlite)
fromJSON(query)
library(twitteR)
library(dplyr)
setup_twitter_oauth("2N7LWUtcIhDclJyD3o4xiVALn",
"HveoCvmFP0tVpXKRVjB5DfZHumbt1zYqEPtHZ6Pnim3nxBMMjJ",
"2942573478-EwMmyzjO3J7JMHFGYHk8aaC2R4DVyqBz4lrYGmL",
"G8tItt1fvtrwFV7jMPgwlnp0mtr9f9VAcKi66jMtt5bXT")
locations <- twitteR::availableTrendLocations()
# getting only the locations and the id's associated
locations.US <- locations %>%
filter(country == 'United States', name != 'United States') %>%
select(name, woeid)
#removing spaces and hyphens for easier storage
locations.US.nospace <- locations.US
>>>>>>> 1c19d7eea33789d549cdd10498631d822384d492
locations.US.nospace$name <- gsub(" ", "", locations.US.nospace$name)
locations.US.nospace$name <- gsub("-", "", locations.US.nospace$name)
city.data <- c(1:63)
city.data
names(city.data)
names(city.data) <- locations.US
city.data[1]
city.data <- c(1:63)
names(city.data) <- locations.US
for(i in 1:nrow(locations.US)){
name <- paste0('state.data.', locations.US.nospace$name[i])
assign(name, twitteR::getTrends(locations.US.nospace$woeid[i]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
city.data[i] <- list
}
View(city.data)
city.data
city.data[1]
city.data <- list()
names(city.data)
names(city.data) <- locations.US
city.data <- list(63)
city.data <- list(1:63)
names(city.data) <- locations.US
names(city.data) <- locations.US$name
length(names(city.data))
names(city.data) <- c(1:63)
name <- paste0('state.data.', locations.US$name[1])
assign(name, twitteR::getTrends(locations.US$woeid[1]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
list <- unlist(list)
list
city.data <- c(1:63)
names(city.data) <- locations.US$name
city.data[1] <- list
city.data
city.data <- vector(mode = "list")
paste0("city.data$", locations.US$name[i])
name <- paste0('state.data.', locations.US$name[1])
assign(name, twitteR::getTrends(locations.US$woeid[1]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
paste0("city.data$", locations.US$name[i]) <- list
eval(parse(text = "paste0("city.data$", locations.US$name[i])")) <- list
setup_twitter_oauth("KgSpEvpVmBqyjaHb8NKRS2cbq",
"XLGHwHKXUF6rt4m3lXQNhCOVsAyzneQrznBe4INje27olbCUHO",
"803743164884340736-ceXBIGtqVWc8wp27jXclV82QX6gWtoT",
"Ipi5Fun3ct3xbVFcfsAkCabWYMk0WLTp7Uyq3syYRVhKJ")
# trend locations
locations <- twitteR::availableTrendLocations()
# getting only the locations and the id's associated
locations.US <- locations %>%
filter(country == 'United States', name != 'United States') %>%
select(name, woeid)
#removing spaces and hyphens for easier storage
locations.US.nospace <- locations.US
locations.US.nospace$name <- gsub(" ", "", locations.US.nospace$name)
locations.US.nospace$name <- gsub("-", "", locations.US.nospace$name)
#initializing an empty matrix
city.data <- matrix(list(), nrow = 63, ncol = 2)
for(i in 1:nrow(locations.US)){
name <- paste0('state.data.', locations.US.nospace$name[i])
assign(name, twitteR::getTrends(locations.US.nospace$woeid[i]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
city.data[[i, 1]] <- locations.US$name[i]
city.data[[i, 2]] <- list
}
city.data
dimnames(city.data) <- list(unlist(locations.US$name), c("lol", "lul"))
city.data
city.data <- matrix(list(), nrow = 63, ncol = 1)
dimnames(city.data) <- list(unlist(locations.US$name), c("Data"))
for(i in 1:nrow(locations.US)){
name <- paste0('state.data.', locations.US.nospace$name[i])
assign(name, twitteR::getTrends(locations.US.nospace$woeid[i]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
city.data[[i, 1]] <- locations.US$name[i]
city.data[[i, 2]] <- list
}
for(i in 1:nrow(locations.US)){
name <- paste0('state.data.', locations.US.nospace$name[i])
assign(name, twitteR::getTrends(locations.US.nospace$woeid[i]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
city.data[[i, 1]] <- list
}
city.data
<<<<<<< HEAD
rm(city.data)
rm(locations, locations.US, locations.US.nospace, state.data.Mesa)
rm(state.data.Albuquerque, state.data.Atlanta)
rm(state.data.Austin, state.data.Baltimore, state.data.BatonRouge)
rm(state.data.Birmingham, state.data.Boston, state.data.Charlotte, state.data.Chicago)
rm(state.data.Cincinnati, state.data.Cleveland,state.data.ColoradoSprings)
ls
rm(state.data.Columbus, state.data.DallasFt.Worth,state.data.Denver,state.data.Detroit,state.data.ElPaso,state.data.Fresno)
ls
rm(state.data.Greensboro,state.data.Harrisburg,state.data.Honolulu,state.data.Houston,state.data.Indianapolis,state.data.Jackson,state.data.Jacksonville,state.data.KansasCity)
ls
rm(state.data.LasVegas,state.data.LongBeach,state.data.LosAngeles,state.data.Louisville,state.data.Memphis,state.data.Miami,state.data.Milwaukee,state.data.Minneapolis)
ls
rm(state.data.Nashville,state.data.NewHaven,state.data.NewOrleans,state.data.NewYork)
rm(state.data.Norfolk,state.data.OklahomaCity,state.data.Omaha,state.data.Orlando,state.data.Philadelphia,state.data.Phoenix,state.data.Pittsburgh,state.data.Portland)
ls
rm(state.data.Providence,state.data.Raleigh,state.data.Richmond,state.data.Sacramento,state.data.SaltLakeCity)
rm(state.data.SanAntonio,state.data.SanDiego,state.data.SanFrancisco,state.data.SanJose,state.data.Seattle,state.data.St.Louis,state.data.Tallahassee)
rm(state.data.Tampa,state.data.Tucson,state.data.Washington,state.data.VirginiaBeach)
rm(i, list, name)
library(dplyr)
library(shiny)
library(plotly)
library(rsconnect)
#install.packages('twitteR')
library(twitteR)
twitteR:::setup_twitter_oauth("KgSpEvpVmBqyjaHb8NKRS2cbq",
"XLGHwHKXUF6rt4m3lXQNhCOVsAyzneQrznBe4INje27olbCUHO",
"803743164884340736-ceXBIGtqVWc8wp27jXclV82QX6gWtoT",
"Ipi5Fun3ct3xbVFcfsAkCabWYMk0WLTp7Uyq3syYRVhKJ")
# This code is supposed to get the trend locations, and then get the trends for each location --Sean
# trend locations
locations <- twitteR::availableTrendLocations()
# getting only the locations and the id's associated
locations.US <- locations %>%
filter(country == 'United States', name != 'United States') %>%
select(name, woeid)
#removing spaces and hyphens for easier storage
locations.US.nospace <- locations.US
locations.US.nospace$name <- gsub(" ", "", locations.US.nospace$name)
locations.US.nospace$name <- gsub("-", "", locations.US.nospace$name)
#initializing an empty matrix, and changing the names
city.data <- matrix(list(), nrow = 63, ncol = 1)
dimnames(city.data) <- list(unlist(locations.US$name), c("Data"))
cities <- read.csv("City_Locations.csv", stringsAsFactors = FALSE)
for(i in 1:5){
name <- paste0('state.data.', locations.US.nospace$name[i])
assign(name, twitteR::getTrends(locations.US.nospace$woeid[i]))
list <- eval(parse(text = name)) %>% select(name) %>% split(seq(nrow(eval(parse(text = name)))))
list <- list[c(1:20)]
city.data[[i, 1]] <- list
}
search.string <- "trump"
all.cities <- rownames(city.data)
ranking <- vector(mode="integer", length = length(all.cities))
related.topic <- vector(mode="character", length = length(all.cities))
for(city in 1:length(all.cities)) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 21) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
to.plot <- cities %>%
select(new.name, lat, lon) %>%
mutate(ranking, related.topic)
for(city in 1:length(all.cities)) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
name
View(name()
()
)
View(name)
is.List(name)
is.list(name)
is.vector(name)
name
all.cities[1]
city.data[[all.cities[1], 1]]
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
to.plot <- cities %>%
select(new.name, lat, lon) %>%
mutate(ranking, related.topic)
View(to.plot)
ranking <- vector(mode="integer", length = 5)
related.topic <- vector(mode="character", 5)
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
View(to.plot)
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
to.plot <- cities %>%
select(new.name, lat, lon) %>%
mutate(ranking, related.topic)
search.string <- "a"
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
to.plot <- cities %>%
select(new.name, lat, lon) %>%
mutate(ranking, related.topic)
related.topic
ranking <- vector(mode="integer", length = length(all.cities))
related.topic <- vector(mode="character", length = length(all.cities))
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
related.topic[city] <- put.related.topic
index <- index + 1
}
}
to.plot <- cities %>%
select(new.name, lat, lon) %>%
mutate(ranking, related.topic)
View(to.plot)
runApp()
popular.topic
is.vector(popular.topic)
grepl(search.string, tolower(gsub(" ", "", popular.topic)))
as.character(search.string)
runApp()
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(to.plot, locationmode = 'USA-states', sizes = c(1, 200)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~ranking, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string(), tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
if(put.ranking > 0) {
ranking[city] <- 21 - put.ranking
}
related.topic[city] <- put.related.topic
index <- index + 1
}
}
for(city in 1:5) {
current.city <- all.cities[city]
most.popular <- city.data[[current.city, 1]]
has.match <- FALSE
index <- 1
while(has.match == FALSE && index < 6) {
put.related.topic <- ""
put.ranking <- 0
popular.topic <- most.popular[[index]]$name
if(grepl(search.string, tolower(gsub(" ", "", popular.topic))) == TRUE) {
put.related.topic <- popular.topic
put.ranking <- index
has.match <- TRUE
}
ranking[city] <- put.ranking
if(put.ranking > 0) {
ranking[city] <- 21 - put.ranking
}
related.topic[city] <- put.related.topic
index <- index + 1
}
}
p
to.plot
to.plot <- cities %>%
select(new.name, lat, lon) %>%
mutate(ranking, related.topic)
View(to.plot)
p
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(to.plot, locationmode = 'USA-states', sizes = c(1, 100)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~ranking, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(to.plot, locationmode = 'USA-states', sizes = c(1, 200)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~ranking, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(to.plot, locationmode = 'USA-states', sizes = c(1, 500)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~ranking, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(to.plot, locationmode = 'USA-states', sizes = c(1, 10)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~ranking, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(to.plot, locationmode = 'USA-states', sizes = c(1, 100), color=~ranking) %>%
add_markers(
x = ~lon, y = ~lat, size = ~ranking, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
p <- plot_geo(to.plot, locationmode = 'USA-states', color=~ranking) %>%
add_markers(
x = ~lon, y = ~lat, size = 25, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
p <- plot_geo(to.plot, locationmode = 'USA-states', color=~ranking) %>%
add_markers(
x = ~lon, y = ~lat, size = 1, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
p <- plot_geo(to.plot, locationmode = 'USA-states', color=~ranking) %>%
add_markers(
x = ~lon, y = ~lat, size = 10000, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
p <- plot_geo(to.plot, locationmode = 'USA-states', color=~ranking) %>%
add_markers(
x = ~lon, y = ~lat, hoverinfo = "text",
text = ~paste(to.plot$new.name, "<br />", to.plot$related.topic)
) %>%
layout(title = 'Trending levels of topics', geo = g)
p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
>>>>>>> 259060b3a73aec0986c235d7703fa18c23d3cb75
>>>>>>> 1c19d7eea33789d549cdd10498631d822384d492
